@model Thermory.Domain.Models.Order
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<table id="packageCountEntry">
    <tr>
        <td>
            <label for="numberOfPackages">Number of <span>@Model.PackagingType.Name</span>s</label>
        </td>
        <td colspan="2">
            <input type="text" id="numberOfPackages" class="form-control numeric" />
        </td>
        <td>
            <div type="button" class="btn btn-success" onclick="addPackages();">
                <span class="glyphicon glyphicon-plus"></span> Add @Model.PackagingType.Name
            </div>
        </td>
    </tr>
</table>
<div id="errorPanel" class="alert alert-danger" role="alert" style="display: none; margin-top: 14px;">
    <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
    <span class="sr-only">Error:</span>
    <span id="errorMessage"></span>
</div>
<div id="resetButton" type="button" class="btn btn-danger" style="display: none;" onclick="resetPackages();">
    <span class="glyphicon glyphicon-remove"></span> Reset <span>@Model.PackagingType.Name</span>s
</div>
@{
    var orderLumberCategories = Model.OrderLumberLineItems.Select(i => i.LumberProduct.LumberType.LumberSubCategory.LumberCategory).Distinct();
    var orderLumberSubCategories = Model.OrderLumberLineItems.Select(i => i.LumberProduct.LumberType.LumberSubCategory).Distinct();
    var orderLumberTypes = Model.OrderLumberLineItems.Select(i => i.LumberProduct.LumberType).Distinct();

    foreach (var category in orderLumberCategories.OrderBy(c => c.SortOrder))
    {
        foreach (var subCategory in orderLumberSubCategories.OrderBy(s => s.SortOrder).Where(s => s.LumberCategoryId == category.Id))
        {
            foreach (var lumberType in orderLumberTypes.OrderBy(s => s.SortOrder).Where(s => s.LumberSubCategoryId == subCategory.Id))
            {
                <h3><strong>@category.Name:</strong> @subCategory.Name</h3>
                <h5><em>@lumberType.Name</em></h5>
                <table class="table table-striped table-condensed packagingSummary">
                    <thead>
                        <tr>
                            <th>Length</th>
                            <th>Width</th>
                            <th>Pieces</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var lineItem in Model.OrderLumberLineItems.Where(li => li.LumberProduct.LumberType.Id == lumberType.Id))
                        {
                            <tr id="@lineItem.LumberProduct.Id">
                                <td>@lineItem.LumberProduct.LengthInFeet FT</td>
                                <td>@lineItem.LumberProduct.LumberType.LumberSubCategory.WidthInInches"</td>
                                <td>@lineItem.Quantity</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        }
    }
}
<div id="savePackagesButton" type="button" class="btn btn-success" style="display: none;" onclick="savePackagingSlips();">
    <span class="glyphicon glyphicon-ok"></span> Save
</div>

<script language="javascript">
    var packageCount = 0;
    var packageType = '@Model.PackagingType.Name';
    var packagingValues = new Array();

    function addPackages() {
        $('#errorPanel').hide();
        packageCount = parseInt($('#numberOfPackages').val());
        if (packageCount == 0 || isNaN(packageCount)) {
            $('#errorMessage').text('The number of ' + packageType + 's must be greater than 0.');
            $('#errorPanel').show();
            return;
        }

        for (var i = 1; i <= packageCount; i++) {
            $('.packagingSummary').find('thead').find('tr').append('<th>' + packageType + ' ' + i + '</th>');

            $('.packagingSummary').find('tbody').find('tr').each(function (index, value) {
                var id = $(this).attr('id');
                $(this).append('<td class="' + id + '"><input id="' + id + ':' + i + '" class="form-control numeric" type="text" style="width: 100px;" maxlength="6" value="0" /></td>');
            });
            
            $('.numeric').keydown(rejectNonNumericText);
        }
        $('#packageCountEntry').hide();
        $('#resetButton').show();
        $('#savePackagesButton').show();
    }

    function resetPackages() {
        packageCount = parseInt($('#numberOfPackages').val());
        for (var i = 1; i <= packageCount; i++) {
            $('.packagingColumn' + i).remove();
        }
        $('#numberOfPackages').val(null);
        $('#packageCountEntry').show();
        $('#resetButton').hide();
        $('#savePackagesButton').hide();
    }

    function savePackagingSlips() {
        packageCount = parseInt($('#numberOfPackages').val());
        $('.packagingSummary').find('tbody').find('tr').each(function (index, value) {
            var id = $(this).attr('id');
            //for (var i = 1; i <= packageCount; i++) {
            //    $('#' + id + ':' + i);
            //}
        });
    }
</script>
