@using WebGrease.Css.Extensions
@model Thermory.Domain.Models.LumberCategory

@foreach (var subCategory in Model.LumberSubCategories.OrderBy(s => s.SortOrder))
{
    var millimeterLengths = new List<int>();
    subCategory.LumberTypes.ForEach(pt => pt.LengthsMillimeters.ForEach(l => { if (!millimeterLengths.Contains(l)) millimeterLengths.Add(l); }));
    var feetLengths = new List<double>();
    subCategory.LumberTypes.ForEach(pt => pt.LengthsFeet.ForEach(l => { if (!feetLengths.Contains(l)) feetLengths.Add(l); }));
    var columns = millimeterLengths.Count + 4;
    var blankRow = string.Format("<tr><td colspan=\"{0}\">&nbsp;</td></tr>", columns);

    <table class="table table-condensed inventory">
        <tr class="metricHeading">
            <td class="subCategoryUnit">mm</td>
            <td class="subCategoryDimensions">@subCategory.ThicknessInMillimeters x @subCategory.WidthInMillimeters</td>
            @foreach (var length in millimeterLengths)
            {
                <td class="subCategoryCellPadding subCategoryLength">@length.ToString("n0")</td>
            }
            <td colspan="2"></td>
        </tr>
        <tr class="englishHeading">
            <td colspan="2"><div class="headingWidth"><strong title="@subCategory.Name">@subCategory.Name</strong></div></td>
            @foreach (var length in feetLengths)
            {
                <td class="subCategoryCellPadding subCategoryLength">@length</td>
            }
            <td>Total LF</td>
            <td class="subCategoryCellPadding">Total SF</td>
        </tr>
        @foreach (var lumberType in subCategory.LumberTypes.OrderBy(t => t.SortOrder))
        {
            @Html.Raw(blankRow)
            <tr>
                <td colspan="2" class="productType productTypeHeading"><div class="headingWidth" title="@lumberType.Name">@lumberType.Name</div></td>
                @foreach (var length in millimeterLengths)
                {
                    var lumberForLength = lumberType.LumberProducts.SingleOrDefault(p => p.LengthInMillimeters == length);
                    var quantity = @lumberForLength == null ? 0 : lumberForLength.Quantity;
                    <td class="productType subCategoryCellPadding subCategoryLength">@quantity.ToString("n0")</td>
                }
                <td rowspan="3" class="totalLinearFeet">@lumberType.TotalLinearFeet.ToString("n0")</td>
                <td rowspan="3" class="totalSquareFeet">@lumberType.TotalSquareFeet.ToString("n0")</td>
            </tr>
            <tr>
                <td colspan="2" class="productType productTypeStatistic">Packs</td>
                @foreach (var length in millimeterLengths)
                {
                    var lumberForLength = lumberType.LumberProducts.SingleOrDefault(p => p.LengthInMillimeters == length);
                    var packs = @lumberForLength == null ? "N/A" : lumberForLength.PacksHtml;
                    <td class="subCategoryCellPadding subCategoryLength">@Html.Raw(packs)</td>
                }
            </tr>
            <tr>
                <td colspan="2" class="productType productTypeStatistic">Tally %</td>
                @foreach (var length in millimeterLengths)
                {
                    var lumberForLength = lumberType.LumberProducts.SingleOrDefault(p => p.LengthInMillimeters == length);
                    var tally = @lumberForLength == null || !lumberForLength.IncludeInCalculations ? "N/A" : string.Format("{0}%", lumberForLength.TallyPercentage);
                    <td class="productType subCategoryCellPadding subCategoryLength productTypeTally">@tally</td>
                }
            </tr>
            @Html.Raw(blankRow)
            <tr>
                <td colspan="2" class="productType productTypeStatistic">LF / Length</td>
                @foreach (var length in millimeterLengths)
                {
                    var lumberForLength = lumberType.LumberProducts.SingleOrDefault(p => p.LengthInMillimeters == length);
                    var linearFeet = lumberForLength == null ? 0 : lumberForLength.LinearFeet;
                    var calculationCss = lumberForLength == null || lumberForLength.IncludeInCalculations ? string.Empty : "text-decoration: line-through;";
                    <td class="subCategoryCellPadding subCategoryLength" style="@calculationCss">@linearFeet.ToString("n0")</td>
                }
                <td class="totalPieceHeading">Total PCS</td>
                <td>@lumberType.TotalPieces.ToString("n0")</td>
            </tr>
            <tr>
                <td colspan="2" class="productType productTypeStatistic">SF / Length</td>
                @foreach (var length in millimeterLengths)
                {
                    var lumberForLength = lumberType.LumberProducts.SingleOrDefault(p => p.LengthInMillimeters == length);
                    var squareFeet = lumberForLength == null ? 0 : lumberForLength.SquareFeet;
                    var calculationCss = lumberForLength == null || lumberForLength.IncludeInCalculations ? string.Empty : "text-decoration: line-through;";
                    <td class="productType subCategoryCellPadding subCategoryLength" style="@calculationCss">@squareFeet.ToString("n0")</td>
                }
                <td colspan="2">&nbsp;</td>
            </tr>
        }
    </table>
    <br />
}