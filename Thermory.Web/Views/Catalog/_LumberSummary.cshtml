@model Thermory.Domain.Models.LumberCategory
@{
    var firstSubCategoryId = Model.LumberSubCategories.First().Id;
}

<input type="hidden" id="lumberCategoryId" value="@Model.Id" />
<form>
    <div class="form-group" row>
        <div class="col-md-3" style="margin-top: 8px;">
            <label for="lumberCategoryName">Category Name</label>
        </div>
        <div class="col-md-9">
            <input type="text" class="form-control" name="lumberCategoryName" id="lumberCategoryName" value="@Model.Name" placeholder="Category Name" />
        </div>
    </div>
    <div class="dropdown">
        <button class="dropdown-toggle" type="button" id="subCategoryDropDown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
            Choose a Sub Category
            <span class="caret"></span>
        </button>
        <ul class="dropdown-menu" aria-labelledby="subCategoryDropDown">
            <li><a href="~/Catalog/Add"><span class="glyphicon glyphicon-plus"></span> Add</a></li>
            @{
                foreach (var subCategory in Model.LumberSubCategories.OrderBy(s => s.SortOrder))
                {
                    <li><a href="~/Catalog/Index/@subCategory.Id">@subCategory.Name</a></li>
                }
            }
        </ul>
    </div>
    <ul class="nav nav-tabs" data-tabs="tabs">
        @foreach (var subCategory in Model.LumberSubCategories.OrderBy(s => s.SortOrder))
        {
            var active = subCategory.Id == firstSubCategoryId ? "class=active" : "";
            <li @active><a href="#@subCategory.Id" data-toggle="tab">@subCategory.Name</a></li>
        }
    </ul>
    <div class="tab-content">
        @foreach (var subCategory in Model.LumberSubCategories.OrderBy(s => s.SortOrder))
        {
            var active = subCategory.Id == firstSubCategoryId ? "active" : "";
            var widthId = string.Format("width{0}", subCategory.Id);
            var thicknessId = string.Format("thickness{0}", subCategory.Id);
            <div id="@subCategory.Id" class="tab-pane @active">
                <div class="form-group" row>
                    <div class="col-md-3" style="margin-top: 8px;">
                        <label for="lumberSubCategoryName">Sub Category Name</label>
                    </div>
                    <div class="col-md-9">
                        <input type="text" class="form-control" name="lumberSubCategoryName" id="lumberSubCategoryName" value="@subCategory.Name" placeholder="Sub Category Name" />
                    </div>
                </div>
                <div class="form-group" row>
                    <div class="col-md-3" style="margin-top: 8px;">
                        <label for="@widthId">Width mm</label>
                    </div>
                    <div class="col-md-9">
                        <input type="text" class="form-control" name="@widthId" id="@widthId" value="@subCategory.WidthInMillimeters" maxlength="6" pattern="[0-9]*" placeholder="Width mm" />
                    </div>
                </div>
                <div class="form-group" row>
                    <div class="col-md-3" style="margin-top: 8px;">
                        <label for="@thicknessId">Thickness mm</label>
                    </div>
                    <div class="col-md-9">
                        <input type="text" class="form-control" name="@thicknessId" id="@thicknessId" value="@subCategory.ThicknessInMillimeters" maxlength="6" pattern="[0-9]*" placeholder="Thickness mm" />
                    </div>
                </div>
            </div>
        }
    </div>
</form>

@*@foreach (var subCategory in Model.LumberSubCategories.OrderBy(s => s.SortOrder))
    {
        var millimeterLengths = new List<int>();
        subCategory.LumberTypes.ForEach(pt => pt.LengthsMillimeters.ForEach(l => { if (!millimeterLengths.Contains(l)) millimeterLengths.Add(l); }));
        var feetLengths = new List<double>();
        subCategory.LumberTypes.ForEach(pt => pt.LengthsFeet.ForEach(l => { if (!feetLengths.Contains(l)) feetLengths.Add(l); }));
        var columns = millimeterLengths.Count + 4;
        var blankRow = string.Format("<tr><td colspan=\"{0}\">&nbsp;</td></tr>", columns);

        <table class="table table-condensed inventory">
            <tr class="metricHeading">
                <td class="subCategoryUnit">mm</td>
                <td class="subCategoryDimensions">@subCategory.ThicknessInMillimeters x @subCategory.WidthInMillimeters</td>
                @foreach (var length in millimeterLengths)
                {
                    <td class="subCategoryCellPadding subCategoryLength">@length</td>
                }
                <td colspan="2"></td>
            </tr>
            <tr class="englishHeading">
                <td colspan="2"><div class="headingWidth"><strong title="@subCategory.Name">@subCategory.Name</strong></div></td>
                @foreach (var length in feetLengths)
                {
                    <td class="subCategoryCellPadding subCategoryLength">@length</td>
                }
                <td>Total LF</td>
                <td class="subCategoryCellPadding">Total SF</td>
            </tr>
            @foreach (var lumberType in subCategory.LumberTypes.OrderBy(t => t.SortOrder))
            {
                @Html.Raw(blankRow)
                <tr>
                    <td colspan="2" class="productType productTypeHeading"><div class="headingWidth" title="@lumberType.Name">@lumberType.Name</div></td>
                    @foreach (var length in millimeterLengths)
                    {
                        var lumberForLength = lumberType.LumberProducts.SingleOrDefault(p => p.LengthInMillimeters == length);
                        var quantity = @lumberForLength == null ? 0 : lumberForLength.Quantity;
                        <td class="productType subCategoryCellPadding subCategoryLength">@quantity</td>
                    }
                    <td rowspan="2" class="totalLinearFeet">@lumberType.TotalLinearFeet</td>
                    <td rowspan="2" class="totalSquareFeet">@lumberType.TotalSquareFeet</td>
                </tr>
                <tr>
                    <td colspan="2" class="productType productTypeStatistic">Tally %</td>
                    @foreach (var length in millimeterLengths)
                    {
                        var lumberForLength = lumberType.LumberProducts.SingleOrDefault(p => p.LengthInMillimeters == length);
                        var tally = @lumberForLength == null ? 0 : lumberForLength.TallyPercentage;
                        <td class="productType subCategoryCellPadding subCategoryLength productTypeTally">@tally%</td>
                    }
                </tr>
                @Html.Raw(blankRow)
                <tr>
                    <td colspan="2" class="productType productTypeStatistic">LF / Length</td>
                    @foreach (var length in millimeterLengths)
                    {
                        var lumberForLength = lumberType.LumberProducts.SingleOrDefault(p => p.LengthInMillimeters == length);
                        var linearFeet = lumberForLength == null ? 0 : lumberForLength.LinearFeet;
                        <td class="subCategoryCellPadding subCategoryLength">@linearFeet</td>
                    }
                    <td class="totalPieceHeading">Total PCS</td>
                    <td>@lumberType.TotalPieces</td>
                </tr>
                <tr>
                    <td colspan="2" class="productType productTypeStatistic">SF / Length</td>
                    @foreach (var length in millimeterLengths)
                    {
                        var lumberForLength = lumberType.LumberProducts.SingleOrDefault(p => p.LengthInMillimeters == length);
                        var squareFeet = lumberForLength == null ? 0 : lumberForLength.SquareFeet;
                        <td class="productType subCategoryCellPadding subCategoryLength">@squareFeet</td>
                    }
                    <td colspan="2">&nbsp;</td>
                </tr>
            }
        </table>
        <br />
    }*@