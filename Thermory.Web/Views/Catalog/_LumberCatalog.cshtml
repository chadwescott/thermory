@using Thermory.Domain.Models
@using Thermory.Web.Models
@model LumberCategoryViewModel
@{
    var maxSortOrder = Model.Category.Id == Guid.Empty ? Model.MaxSortOrder + 1 : Model.MaxSortOrder;
}

<form id="lumberForm" style="display: none;">
    <input type="hidden" id="lumberCategoryId" value="@Model.Category.Id" />
    <div style="margin: -20px 0 10px 0;">
        <div class="lumberCategoryView" style="margin-bottom: -2px;">
            <table>
                <tr>
                    <td>
                        <h2>
                            <span id="lumberCategoryNameView">@Model.Category.Name</span>
                        </h2>
                    </td>
                    <td>
                        <div type="button" class="btn btn-primary lumberCategoryView" onclick="showCategoryForm('lumber');" style="margin-top: 20px;">
                            <span class="glyphicon glyphicon-edit"></span> Edit
                        </div>
                    </td>
                </tr>
            </table>
        </div>
        <div class="lumberCategoryForm" style="margin: 24px 0 -6px 0; display: none;">
            <table>
                <tr>
                    <td>
                        <input type="text" id="lumberCategoryName" name="lumberCategoryName" class="form-control"
                               value="@Model.Category.Name" placeholder="Category Name" />
                    </td>
                    <td>
                        <span>Sort Order:</span>
                        <select id="lumberCategorySortOrder" name="lumberCategorySortOrder">
                            @for (var i = 1; i <= maxSortOrder; i++)
                            {
                                var selected = i == Model.Category.SortOrder ? " selected" : "";
                            <option @selected value="@i">@i</option>
                            }
                        </select>
                    </td>
                    <td>
                        <div type="button" class="lumberCategoryForm btn btn-success" onclick="saveLumberCategory();">
                            <span class="glyphicon glyphicon-ok"></span> Save
                        </div>
                    </td>
                    <td>
                        @if (Model.Category.Id != Guid.Empty)
                        {
                            <div type="button" class="lumberCategoryForm btn btn-danger" onclick="showCategoryView('lumber');">
                                <span class="glyphicon glyphicon-remove"></span> Cancel
                            </div>
                        }
                    </td>
                </tr>
            </table>
            <div class="panel panel-danger" id="lumberCategoryErrorPanel" style="display: none;">
                <div class="panel-heading"><span class="glyphicon glyphicon-alert"></span> Error</div>
                <div id="lumberCategoryError" class="panel-body"></div>
            </div>
        </div>
    </div>
    @if (Model.Category.Id != Guid.Empty)
    {
        var firstSubCategoryId = Model.Category.LumberSubCategories.Any() ? Model.Category.LumberSubCategories.OrderBy(s => s.SortOrder).First().Id : Guid.Empty;
        var maxSubCategorySortOrder = Model.Category.LumberSubCategories.Count;
        <ul class="nav nav-tabs" data-tabs="tabs">
            @{ string active;}
            @foreach (var subCategory in Model.Category.LumberSubCategories.OrderBy(s => s.SortOrder))
            {
                active = subCategory.Id == firstSubCategoryId ? "active" : "";
                <li class="lumberSubCategoryTab @active"><a id="@string.Format("lumberSubCategoryLink{0}", subCategory.Id)" href="#@string.Format("lumberSubCategoryTab{0}", subCategory.Id)" data-toggle="tab">@subCategory.Name</a></li>
            }
            @{ active = firstSubCategoryId == Guid.Empty ? "class=active" : "";}
            <li class="lumberSubCategoryTab @active"><a id="@string.Format("lumberSubCategoryLink{0}", Guid.Empty)" href="#@string.Format("lumberSubCategoryTab{0}", Guid.Empty)" data-toggle="tab"><span class="glyphicon glyphicon-plus"></span> Add</a></li>
        </ul>
        <div class="tab-content" style="height: 450px; overflow-y: auto;">
            @{ LumberSubCategoryViewModel subCategoryViewModel;}
            @foreach (var subCategory in Model.Category.LumberSubCategories.OrderBy(s => s.SortOrder))
            {
                subCategoryViewModel = new LumberSubCategoryViewModel { Active = subCategory.Id == firstSubCategoryId, SubCategory = subCategory, MaxSortOrder = maxSubCategorySortOrder };
                @Html.Partial("_LumberSubCategoryForm", subCategoryViewModel)
            }
            @{
        subCategoryViewModel = new LumberSubCategoryViewModel { Active = !Model.Category.LumberSubCategories.Any(), SubCategory = new LumberSubCategory { LumberTypes = new List<LumberType>() }, MaxSortOrder = maxSubCategorySortOrder + 1 };
        @Html.Partial("_LumberSubCategoryForm", subCategoryViewModel)
            }
        </div>
    }
</form>
<script type="text/javascript">
    $(document).ready(function () {
        @{ var command = Model.Category.Id == Guid.Empty ? "showCategoryForm('lumber');" : "showCategoryView('lumber');";}
        @Html.Raw(command)
        $('.numeric').keydown(rejectNonNumericText);
        initiateViewMode('lumberSubCategory');
        initiateViewMode('lumberType');
        initiateViewMode('lumberProduct');
        $('#lumberForm').show();
    });

    function saveLumberCategory() {
        var id = $('#lumberCategoryId').val();
        var name = $('#lumberCategoryName').val();
        var sortOrder = $('#lumberCategorySortOrder').val();
        var category = {
            Id: id,
            Name: name,
            SortOrder: sortOrder
        };

        $.ajax({
            type: 'POST',
            url: '@Url.Action("SaveLumberCategory", "Catalog")',
            data: category,
            dataType: 'text',
            success: function (data) {
                category = JSON.parse(data);
                if (id == '@Guid.Empty') {
                    location.href = "Index/" + category.Id;
                    return;
                }
                $('#lumberCategoryNameView').text(category.Name);
                $('#lumberCategoryEdit' + category.Id).text(category.Name);
                showCategoryView('lumber');
            },
            error: function (data) {
                $('#lumberCategoryError').text(data.responseText);
                $('#lumberCategoryErrorPanel').show();
            }
        });
    }

    function saveLumberSubCategory(id) {
        var name = $('#name' + id).val();
        var sortOrder = $('#sortOrder' + id).val();
        var width = $('#width' + id).val();
        var thickness = $('#thickness' + id).val();
        var bundleSize = $('#bundle' + id).val();
        var weight = $('#weight' + id).val();
        var subCategory = {
            LumberCategoryId: '@Model.Category.Id',
            Id: id,
            Name: name,
            SortOrder: sortOrder,
            WidthInMillimeters: width,
            ThicknessInMillimeters: thickness,
            BundleSize: bundleSize,
            Weight: weight
        };

        $.ajax({
            type: 'POST',
            url: '@Url.Action("SaveLumberSubCategory", "Catalog")',
            data: subCategory,
            dataType: 'text',
            success: function (data) {
                subCategory = JSON.parse(data);
                location.reload();
            },
            error: function (data) {
                console.log(data);
                $('#lumberSubCategoryError' + id).text(data.responseText);
                $('.lumberSubCategoryErrorPanel').show();
            }
        });
    }

    function saveLumberType(suffix) {
        var id = $('#lumberTypeId' + suffix).val();
        var subCategoryId = $('#subCategoryId' + suffix).val();
        var name = $('#name' + suffix).val();
        var sortOrder = $('#sortOrder' + suffix).val();
        var lumberType = {
            Id: id,
            LumberSubCategoryId: subCategoryId,
            Name: name,
            SortOrder: sortOrder
        };

        $.ajax({
            type: 'POST',
            url: '@Url.Action("SaveLumberType", "Catalog")',
            data: lumberType,
            dataType: 'text',
            success: function (data) {
                lumberType = JSON.parse(data);
                if (id == '@Guid.Empty') {
                    location.reload();
                }

                $('#lumberTypeLink' + suffix).text(lumberType.Name);
                $('#nameView' + suffix).text(lumberType.Name);
                $('#sortOrder' + suffix).text(lumberType.SortOrder);
                initiateViewMode('lumberType');
            },
            error: function (data) {
                console.log(data);
                $('#lumberTypeError' + suffix).text(data.responseText);
                $('.lumberTypeErrorPanel').show();
            }
        });
    }

    function saveLumberProduct(suffix) {
        var id = $('#lumberProductId' + suffix).val();
        var lumberTypeId = $('#lumberTypeId' + suffix).val();
        var length = $('#length' + suffix).val();
        var calculate = $('#calculate' + suffix).prop('checked');
        var sortOrder = $('#sortOrder' + suffix).val();
        var quantity = $('#quantity' + suffix).val();
        var lumberProduct = {
            Id: id,
            LumberTypeId: lumberTypeId,
            LengthInMillimeters: length,
            Quantity: quantity,
            SortOrder: sortOrder,
            IncludeInCalculations: calculate
        };

        $.ajax({
            type: 'POST',
            url: '@Url.Action("SaveLumberProduct", "Catalog")',
            data: lumberProduct,
            dataType: 'text',
            success: function (data) {
                lumberProduct = JSON.parse(data);
                if (id == '@Guid.Empty') {
                    location.reload();
                }

                $('#lumberProductLink' + suffix).text(lumberProduct.LengthInMillimeters);
                $('#lengthView' + suffix).text(lumberProduct.LengthInMillimeters);
                $('#quantity' + suffix).text(lumberProduct.Quantity);
                $('#lumberProductCalculate' + suffix).text(lumberProduct.IncludeInCalculations ? 'Yes' : 'No');
                $('#sortOrder' + suffix).text(lumberProduct.SortOrder);
                initiateViewMode('lumberProduct');
            },
            error: function (data) {
                console.log(data);
                $('#lumberProductError' + suffix).text(data.responseText);
                $('.lumberProductErrorPanel').show();
            }
        });
    }
</script>