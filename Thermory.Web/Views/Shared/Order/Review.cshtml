@using Thermory.Domain.Constants
@using Thermory.Domain.Enums
@using Thermory.Web.Models
@model OrderReview
@{
    Layout = "~/Views/Shared/_Layout.cshtml";

    var orderType = Model.Order.OrderType.Name;
    var controller = string.Format("{0}Order", orderType);
}

<h3>
    <strong>@orderType Order @Model.Order.OrderNumber</strong>
    @if (Model.Order.OrderStatus.OrderStatusEnum == OrderStatuses.Deleted)
    {
        <span class="label label-danger"><span class="glyphicon @Model.Order.OrderStatus.GlyphiconClass"></span> @Model.Order.OrderStatus.Name</span>
    }
</h3>
@if (@Model.Order.Customer != null)
{
    <h4>@Model.Order.Customer.Name</h4>
}
<table>
    <tr>
        @foreach (var status in Model.OrderStatuses.Where(s => s.SortOrder > 0))
        {
            if (status.SortOrder <= Model.Order.OrderStatus.SortOrder)
            {
                <td style="text-align: center;"><span class="glyphicon glyphicon-ok-circle glyphicon-success"></span></td>
            }
            else if (status.SortOrder == Model.Order.OrderStatus.SortOrder + 1)
            {
                <td style="text-align: center;"><span class="glyphicon glyphicon-download glyphicon-warning"></span></td>
            }
            else
            {
                <td style="text-align: center;"><span class="glyphicon glyphicon-ban-circle glyphicon-default"></span></td>
            }
        }
    </tr>
    <tr>
        @foreach (var status in Model.OrderStatuses.Where(s => s.SortOrder > 0))
        {
            if (status.SortOrder <= Model.Order.OrderStatus.SortOrder)
            {
                <td>
                    <span class="label label-success"><span class="glyphicon @status.GlyphiconClass"></span> @status.Name</span>
                </td>
            }
            else if (status.SortOrder == Model.Order.OrderStatus.SortOrder + 1)
            {
                <td>
                    <span class="label label-warning"><span class="glyphicon @status.GlyphiconClass"></span> @status.Name</span>
                </td>
            }
            else
            {
                <td>
                    <span class="label label-default"><span class="glyphicon @status.GlyphiconClass"></span> @status.Name</span>
                </td>
            }
        }
    </tr>
</table>
@if (Model.Order.OrderStatus.OrderStatusEnum == OrderStatuses.WarehouseReceived)
{
    <br />
    <div class="panel panel-default">
        <div class="panel-heading">Time to pull</div>
        <div class="panel-body" style="padding-top: 0;">
            @if (Model.Order.OrderStatus.OrderStatusEnum == OrderStatuses.WarehouseReceived)
            {
                <table>
                    <tr>
                        <td>
                            <input type="text" id="hoursToPull" class="form-control numeric" maxlength="2" value="@Model.Order.HoursToPull" style="width: 50px;" />
                        </td>
                        <td>hours</td>
                        <td>
                            <select id="minutesToPull" class="form-control">
                                <option value="0">0</option>
                                <option value="15">15</option>
                                <option value="30">30</option>
                                <option value="45">45</option>
                            </select>
                        </td>
                        <td>minutes</td>
                    </tr>
                </table>
            }
            @if (Model.Order.OrderType.OrderTypeEnum == OrderTypes.SalesOrder && Model.Order.OrderStatus.SortOrder >= Model.OrderStatuses.Single(s => s.OrderStatusEnum == OrderStatuses.Pulled).SortOrder)
            {
                <div>Time taken to pull: @Model.Order.HoursToPull hours @Model.Order.MinutesToPullRemainder minutes</div>
            }
            <div type="button" class="btn btn-success" onclick="pullOrder();">
                <span class="glyphicon glyphicon-share-alt"></span> Pulled
            </div>
            <div id="pullOrderErrorPanel" class="alert alert-danger" role="alert" style="display: none; margin-top: 14px;">
                <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
                <span class="sr-only">Error:</span>
                <span id="pullOrderErrorMessage"></span>
            </div>
        </div>
    </div>
}
<div>
    <br>
    @if (Model.Order.OrderStatus.OrderStatusEnum != OrderStatuses.Deleted)
    {
        if (User.IsInRole(Role.InventoryMaster))
        {
            <div type="button" class="btn btn-primary" onclick="window.location = ('@Url.Action("Edit", controller, new RouteValueDictionary {{"id", Model.Order.Id}})'); ">
                <span class="glyphicon glyphicon-edit"></span> Edit
            </div>
        }
        if (Model.Order.OrderStatus.OrderStatusEnum == OrderStatuses.InTransit && User.IsInRole(Role.InventoryMaster))
        {
            <div type="button" class="btn btn-success" onclick="receiveOrder();">
                <span class="glyphicon glyphicon-log-in"></span> Received
            </div>
        }
        if (Model.Order.OrderStatus.OrderStatusEnum == OrderStatuses.SentToWarehouse)
        {
            <div type="button" class="btn btn-success" onclick="warehouseReceivedOrder();">
                <span class="glyphicon glyphicon-log-in"></span> Warehouse Received
            </div>
        }
        if (User.IsInRole(Role.InventoryMaster))
        {
            <div type="button" class="btn btn-danger" id="deleteButton" data-toggle="confirmation">
                <span class="glyphicon glyphicon-trash"></span> Delete
            </div>
        }
    }
    <div type="button" class="btn btn-info" onclick="window.location = ('@Url.Action("index", controller)');">
        <span class=" glyphicon glyphicon-arrow-left"></span> Back
    </div>
    <br><br>
</div>
<div id="worksheetPanel">
    <ul class="nav nav-tabs" data-tabs="tabs">
        <li class="active"><a href="#orderSummary" data-toggle="tab">Summary</a></li>
        <li><a href="#orderRatings" data-toggle="tab">Ratings</a></li>
        <li><a href="#orderTransactions" data-toggle="tab">Transactions</a></li>
    </ul>
    <div class="tab-content">
        <div id="orderSummary" class="tab-pane active">
            @{
                @Html.Partial("Order/_LumberProductReview", Model)
                @Html.Partial("Order/_MiscellaneousProductReview", Model)
            }
        </div>
        <div id="orderRatings" class="tab-pane">
            <table class="table table-condensed table-striped" style="margin-top: 0;">
                <colgroup>
                    <col style="width: 30%;" />
                    <col style="width: 70%;" />
                </colgroup>
                <tr>
                    <td>Total Pieces</td>
                    <td>@Model.Order.TotalPieces</td>
                </tr>
                <tr>
                    <td>Total Linear Feet</td>
                    <td>@Model.Order.TotalLinearFeet</td>
                </tr>
                <tr>
                    <td>Total Square Feet</td>
                    <td>@Model.Order.TotalSquareFeet</td>
                </tr>
                <tr>
                    <td>Time To Pull</td>
                    <td>@Model.Order.HoursToPull hours @Model.Order.MinutesToPullRemainder minutes</td>
                </tr>
                <tr>
                    <td>Pieces Pulled Per Hour</td>
                    <td>@Model.Order.PiecesPulledPerHour</td>
                </tr>
                <tr>
                    <td>Linear Feet Pulled Per Hour</td>
                    <td>@Model.Order.LinearFeetPulledPerHour</td>
                </tr>
                <tr>
                    <td>Square Feet Pulled Per Hour</td>
                    <td>@Model.Order.SquareFeetPulledPerHour</td>
                </tr>
                <tr>
                    <td>Time To Load</td>
                    <td>@Model.Order.HoursToLoad hours @Model.Order.MinutesToPullRemainder minutes</td>
                </tr>
                <tr>
                    <td>Pieces Loaded Per Hour</td>
                    <td>@Model.Order.PiecesLoadedPerHour</td>
                </tr>
                <tr>
                    <td>Linear Feet Loaded Per Hour</td>
                    <td>@Model.Order.LinearFeetLoadedPerHour</td>
                </tr>
                <tr>
                    <td>Square Feet Loaded Per Hour</td>
                    <td>@Model.Order.SquareFeetLoadedPerHour</td>
                </tr>
            </table>
        </div>
        <div id="orderTransactions" class="tab-pane">
            <br/>
            @foreach (var transaction in Model.InventoryTransactions)
            {
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <strong>@transaction.TransactionType.Description by @transaction.CreatedBy.FullName</strong>
                        <em>@transaction.CreatedOn</em>
                        @if (transaction.LumberTransactionDetails.Any() || transaction.MiscellaneousTransactionDetails.Any())
                        {
                            <a style="cursor: pointer" data-toggle="collapse" data-target="#@transaction.Id">Details</a>
                        }
                    </div>
                    @if (transaction.LumberTransactionDetails.Any() || transaction.MiscellaneousTransactionDetails.Any())
                    {
                        <div id="@transaction.Id" class="panel-body collapse" style="padding-top: 0; padding-bottom: 0;">
                            @if (transaction.LumberTransactionDetails.Any())
                            {
                                var model = new LumberTransactionDetails { AdjustmentMultiplier = Model.Order.AdjustmentMultiplier, Details = transaction.LumberTransactionDetails };
                                @Html.Partial("Order/_LumberTransactionDetails", model)
                            }
                            @if (transaction.MiscellaneousTransactionDetails.Any())
                            {
                                var model = new MiscellaneousTransactionDetails { AdjustmentMultiplier = Model.Order.AdjustmentMultiplier, Details = transaction.MiscellaneousTransactionDetails };
                                @Html.Partial("Order/_MiscellaneousTransactionDetails", model)
                            }
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<div id="deletingPanel" style="display: none;">Deleting...</div>
<div id="orderTransitioningPanel" style="display: none;">Transitioning order status...</div>

<script type="text/javascript">
    $(document).ready(function () {
        $('.numeric').keydown(rejectNonNumericText);
        $('#deleteButton').confirmation({
            onConfirm: deleteOrder,
            title: "If you delete an order by mistake you will have to create a new order. Are you sure you want to delete this order?"
        });
    });

    function deleteOrder() {
        $('#worksheetPanel').hide();
        $('#deletingPanel').show();

        var order = {
            Id: '@Model.Order.Id',
            OrderNumber: '@Model.Order.OrderNumber',
            OrderType: { Name: '@Model.Order.OrderType.Name' },
            OrderStatus: { Name: '@Model.Order.OrderStatus.Name' }
        };
        var orderJson = JSON.stringify(order);
        var postData = '{"order": ' + orderJson + '}';

        $.ajax({
            type: 'POST',
            url: '@Url.Action("Delete", controller)',
            contentType: 'application/json',
            dataType: 'json',
            data: postData,
            success: function (data, status, request) {
                window.location = ('@Url.Action("Index", controller)');
            },
            error: function (data, status, request) {
                $('#worksheetPanel').show();
                $('#deletingPanel').hide();
            }
        });
    }

    function receiveOrder() {
        transitionOrder('@Url.Action("Receive", controller)', getOrder());
    }

    function warehouseReceivedOrder() {
        transitionOrder('@Url.Action("WarehouseReceived", controller)', getOrder());
    }

    function pullOrder() {
        $('#pullOrderErrorPanel').hide();
        var hoursTaken = parseInt($('#hoursToPull').val());
        var minutesTaken = parseInt($('#minutesToPull').val());
        var totalMinutes = hoursTaken * 60 + minutesTaken;

        if (totalMinutes == 0) {
            $('#pullOrderErrorMessage').text('You must enter the time taken to pull the order.');
            $('#pullOrderErrorPanel').show();
            return;
        }

        var order = getOrder();
        order.MinutesToPull = totalMinutes;
        transitionOrder('@Url.Action("Pulled", controller)', order);
    }

    function getOrder() {
        return {
            Id: '@Model.Order.Id',
            OrderNumber: '@Model.Order.OrderNumber',
            OrderType: { Name: '@Model.Order.OrderType.Name' },
            OrderStatus: { Name: '@Model.Order.OrderStatus.Name' }
        };
    }

    function transitionOrder(url, order) {
        $('#worksheetPanel').hide();
        $('#orderTransitioningPanel').show();

        var orderJson = JSON.stringify(order);
        var postData = '{"order": ' + orderJson + '}';

        $.ajax({
            type: 'POST',
            url: url,
            contentType: 'application/json',
            dataType: 'json',
            data: postData,
            success: function (data, status, request) {
                location.reload();
            },
            error: function (data, status, request) {
                $('#worksheetPanel').show();
                $('#orderTransitioningPanel').hide();
            }
        });
    }
</script>
