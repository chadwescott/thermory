@using Thermory.Domain.Utils
@using WebGrease.Css.Extensions
@model Thermory.Web.Models.LumberOrderForm

@foreach (var subCategory in Model.LumberCategory.LumberSubCategories.OrderBy(s => s.SortOrder))
{
    var millimeterLengths = new List<int>();
    subCategory.LumberTypes.ForEach(pt => pt.LengthsMillimeters.ForEach(l => { if (!millimeterLengths.Contains(l)) millimeterLengths.Add(l); }));
    var feetLengths = new List<double>();
    subCategory.LumberTypes.ForEach(pt => pt.LengthsFeet.ForEach(l => { if (!feetLengths.Contains(l)) feetLengths.Add(l); }));
    var columns = millimeterLengths.Count + 4;
    var blankRow = string.Format("<tr><td colspan=\"{0}\">&nbsp;</td></tr>", columns);

    <table class="table table-condensed inventory">
        <tr class="metricHeading">
            <td class="subCategoryUnit">mm</td>
            <td class="subCategoryDimensions">@subCategory.ThicknessInMillimeters x @subCategory.WidthInMillimeters</td>
            @foreach (var length in millimeterLengths)
            {
                <td class="subCategoryCellPadding subCategoryLength">@length</td>
            }
            <td colspan="2"></td>
        </tr>
        <tr class="englishHeading">
            <td colspan="2"><div class="headingWidth"><strong title="@subCategory.Name">@subCategory.Name</strong></div></td>
            @foreach (var length in feetLengths)
            {
                <td class="subCategoryCellPadding subCategoryLength">@length</td>
            }
            <td>Total LF</td>
            <td class="subCategoryCellPadding">Total SF</td>
        </tr>
        @foreach (var lumberType in subCategory.LumberTypes.OrderBy(t => t.SortOrder))
        {
            var linearFeetId = string.Format("linearFeet{0}", lumberType.Id);
            var squareFeetId = string.Format("squareFeet{0}", lumberType.Id);
            @Html.Raw(blankRow)
            <tr>
                <td colspan="2" class="productType productTypeHeading"><div class="headingWidth" title="@lumberType.Name">@lumberType.Name</div></td>
                @foreach (var length in millimeterLengths)
                {
                    var lumberForLength = lumberType.LumberProducts.Single(p => p.LengthInMillimeters == length);
                    var quantity = @lumberForLength == null ? 0 : lumberForLength.Quantity;
                    var onHandId = string.Format("quantityOnHand{0}{1}", lumberType.Id, length);
                    <td class="productType subCategoryCellPadding subCategoryLength">
                        <input type="hidden" id="@onHandId" value="@quantity" />
                        @quantity
                    </td>
                }
                <td class="totalLinearFeet">@lumberType.TotalLinearFeet</td>
                <td class="totalSquareFeet">@lumberType.TotalSquareFeet</td>
            </tr>
            <tr>
                <td colspan="2" class="productType productTypeStatistic" style="vertical-align: middle;"><div class="headingWidth" title="Order Quantity">Order Quantity</div></td>
                @{
            var orderLinearFeet = 0.0;
                }
                @foreach (var length in millimeterLengths)
                {
                    var productForLength = lumberType.LumberProducts.Single(p => p.LengthInMillimeters == length);
                    var lineItem = Model.LumberLineItems == null ? null : Model.LumberLineItems.SingleOrDefault(li => li.LumberProductId == productForLength.Id);
                    var orderQuantity = lineItem == null ? 0 : lineItem.Quantity;
                    var lineItemId = lineItem == null ? Guid.Empty : lineItem.Id;
                    orderLinearFeet += LumberCalculations.GetLinearFeet(orderQuantity, productForLength.LengthInInches);
                    <td class="productType subCategoryCellPadding subCategoryLength" style="border-top: none;">
                        <div class="form-group">
                            <input type="text" name="lumberQty" id="@lineItemId" productid="@productForLength.Id" lumbertypeid="@lumberType.Id" lengthinmillimeters="@length" lengthininches="@productForLength.LengthInInches" class="form-control" maxlength="6" pattern="[0-9]*" value="@orderQuantity" onchange="lumberProductQuantityChanged('@lumberType.Id', '@subCategory.WidthInInches', '@linearFeetId', '@squareFeetId');" />
                        </div>
                    </td>
                }
                <td id="@linearFeetId" class="totalLinearFeet">@orderLinearFeet</td>
                <td id="@squareFeetId" class="totalSquareFeet">@LumberCalculations.GetSquareFeet(orderLinearFeet, subCategory.WidthInInches)</td>
            </tr>
            <tr>
                <td colspan="2" class="productType productTypeStatistic">Tally %</td>
                @foreach (var length in millimeterLengths)
                {
                    var lumberForLength = lumberType.LumberProducts.SingleOrDefault(p => p.LengthInMillimeters == length);
                    var tally = @lumberForLength == null ? 0 : lumberForLength.TallyPercentage;
                    <td class="productType subCategoryCellPadding subCategoryLength productTypeTally">@tally%</td>
                }
                <td class="totalLinearFeet">&nbsp;</td>
                <td class="totalSquareFeet">&nbsp;</td>
            </tr>
            @Html.Raw(blankRow)
            <tr>
                <td colspan="2" class="productType productTypeStatistic">LF / Length</td>
                @foreach (var length in millimeterLengths)
                {
                    var lumberForLength = lumberType.LumberProducts.SingleOrDefault(p => p.LengthInMillimeters == length);
                    var linearFeet = lumberForLength == null ? 0 : lumberForLength.LinearFeet;
                    <td class="subCategoryCellPadding subCategoryLength">@linearFeet</td>
                }
                <td class="totalPieceHeading">Total PCS</td>
                <td>@lumberType.TotalPieces</td>
            </tr>
            <tr>
                <td colspan="2" class="productType productTypeStatistic">SF / Length</td>
                @foreach (var length in millimeterLengths)
                {
                    var lumberForLength = lumberType.LumberProducts.SingleOrDefault(p => p.LengthInMillimeters == length);
                    var squareFeet = lumberForLength == null ? 0 : lumberForLength.SquareFeet;
                    <td class="productType subCategoryCellPadding subCategoryLength">@squareFeet</td>
                }
                <td colspan="2">&nbsp;</td>
            </tr>
        }
    </table>
    <br />
}

<script>
    function lumberProductQuantityChanged(lumberTypeId, width, linearFeetId, squareFeetId) {
        var linearFeet = 0;
        $('input[lumberTypeId="' + lumberTypeId + '"]').each(function (key, value) {
            var pieces = parseInt($(this).val());
            var lengthInMillimeters = $(this).attr('lengthInMillimeters');
            var lengthInInches = $(this).attr('lengthInInches');
            linearFeet += calculateLinearFeet(pieces, lengthInInches);
            if ('@Model.ValidateQuantityOnHand' == 'True') {
                var quantityOnHandId = 'quantityOnHand' + lumberTypeId + lengthInMillimeters;
                var qtyOnHand = parseInt($('#' + quantityOnHandId).val());
                if (qtyOnHand < pieces) {
                    console.log(qtyOnHand + ' < ' + pieces);
                    $(this).parent().closest('div').addClass('has-error');
                } else {
                    $(this).parent().closest('div').removeClass('has-error');
                }
            }
        });
        $('#' + linearFeetId).html(linearFeet);
        var squareFeet = calculateSquareFeet(linearFeet, width);
        $('#' + squareFeetId).html(squareFeet);
    }

    function calculateLinearFeet(pieces, length) {
        var linearFeet = Math.round(pieces * length / 12);
        return linearFeet;
    }

    function calculateSquareFeet(linearFeet, width) {
        var squareFeet = Math.round(linearFeet * width / 12);
        return squareFeet;
    }
</script>