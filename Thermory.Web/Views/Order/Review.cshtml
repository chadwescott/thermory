@using Thermory.Domain.Enums
@model Thermory.Web.Models.OrderReview
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var orderType = string.Format("{0} Order", Model.Order.OrderType.OrderTypeEnum == OrderTypes.PurchaseOrder ? "Purchase" : "Sales");
    var orderLumberCategories = Model.Order.OrderLumberLineItems.Select(i => i.LumberProduct.LumberType.LumberSubCategory.LumberCategory).Distinct();
    var orderLumberSubCategories = Model.Order.OrderLumberLineItems.Select(i => i.LumberProduct.LumberType.LumberSubCategory).Distinct();
    var orderLumberTypes = Model.Order.OrderLumberLineItems.Select(i => i.LumberProduct.LumberType).Distinct();
    var orderMiscSubCategories = Model.Order.OrderMiscellaneousLineItems.Select(i => i.MiscellaneousProduct.MiscellaneousSubCategory).Distinct();
    var orderMiscCategories = Model.Order.OrderMiscellaneousLineItems.Select(i => i.MiscellaneousProduct.MiscellaneousSubCategory.MiscellaneousCategory).Distinct();
}

<h3><strong>@orderType @Model.Order.OrderNumberString</strong></h3>
@if (@Model.Order.Customer != null)
{
    <h4>@Model.Order.Customer.Name</h4>
}
@if (!Model.Order.IsDeleted)
{
    <div>
        <br>
        <button type="button" onclick="window.location = ('@Url.Action("EditOrder", "Order", new RouteValueDictionary{{"id", Model.Order.Id}})');">Edit</button>
        <button type="button" id="deleteButton" data-toggle="confirmation">Delete</button>
        <br><br>
    </div>
}
<div id="worksheetPanel">
    <ul class="nav nav-tabs" data-tabs="tabs">
        <li class="active"><a href="#orderSummary" data-toggle="tab">Summary</a></li>
        <li><a href="#orderTransactions" data-toggle="tab">Transactions</a></li>
    </ul>
    <div class="tab-content">
        <div id="orderSummary" class="tab-pane active">
            @{
                foreach (var category in orderLumberCategories.OrderBy(c => c.SortOrder))
                {
                    foreach (var subCategory in orderLumberSubCategories.OrderBy(s => s.SortOrder).Where(s => s.LumberCategoryId == category.Id))
                    {
                        foreach (var lumberType in orderLumberTypes.OrderBy(s => s.SortOrder).Where(s => s.LumberSubCategoryId == subCategory.Id))
                        {
                            var totalLinearFeet = 0.0;
                            var totalSquareFeet = 0.0;
                            var totalPieces = 0;
                            <h3><strong>@category.Name:</strong> @subCategory.Name</h3>
                            <h5><em>@lumberType.Name</em></h5>
                            <table class="table table-striped table-condensed" style="width: 800px;">
                                <thead>
                                    <tr>
                                        <th>Length</th>
                                        <th>Width</th>
                                        <th>Quantity</th>
                                        <th>Linear Feet</th>
                                        <th>Square Feet</th>
                                    </tr>
                                </thead>
                                @foreach (var lineItem in Model.Order.OrderLumberLineItems.Where(li => li.LumberProduct.LumberType.Id == lumberType.Id))
                                {
                                    totalLinearFeet += lineItem.LinearFeet;
                                    totalSquareFeet += lineItem.SquareFeet;
                                    totalPieces += lineItem.Quantity;
                                    <tr>
                                        <td>@lineItem.LumberProduct.LengthInInches"</td>
                                        <td>@lineItem.LumberProduct.LumberType.LumberSubCategory.WidthInInches"</td>
                                        <td>@lineItem.Quantity</td>
                                        <td>@lineItem.LinearFeet ft</td>
                                        <td>@lineItem.SquareFeet ft<sup>2</sup></td>
                                    </tr>
                                }
                                <tr>
                                    <td>Total</td>
                                    <td>&nbsp;</td>
                                    <td>@totalPieces</td>
                                    <td>@totalLinearFeet ft</td>
                                    <td>@totalSquareFeet ft<sup>2</sup></td>
                                </tr>
                            </table>
                        }
                    }
                }
                foreach (var category in orderMiscCategories)
                {
                    <h3><strong>@category.Name</strong></h3>
                    foreach (var subCategory in orderMiscSubCategories.OrderBy(s => s.SortOrder).Where(s => s.MiscellaneousCategoryId == category.Id))
                    {
                        <table class="table table-striped table-condensed" style="width: 500px;">
                            <thead>
                                <tr>
                                    <th>Sub Category</th>
                                    <th>Name</th>
                                    <th>Description</th>
                                    <th>Quantity</th>
                                </tr>
                            </thead>
                            <tr>
                                @foreach (var lineItem in Model.Order.OrderMiscellaneousLineItems.Where(li => li.MiscellaneousProduct.MiscellaneousSubCategory.Id == subCategory.Id))
                                {
                                    <td>@subCategory.Name</td>
                                    <td>@lineItem.MiscellaneousProduct.Name</td>
                                    <td>@lineItem.MiscellaneousProduct.Description</td>
                                    <td>@lineItem.Quantity</td>
                                }
                            </tr>
                        </table>
                    }
                }
            }
        </div>
        <div id="orderTransactions" class="tab-pane">
            @foreach (var transaction in Model.InventoryTransactions)
            {
                <div>@transaction.CreatedBy.FullName</div>
                <div>@transaction.CreatedOn</div>
                <div>@transaction.TransactionType.Name</div>
            }
        </div>
    </div>

</div>

<div id="deletingPanel" style="display: none;">Deleting...</div>

<script type="text/javascript">
    $(document).ready(function () {
        $('#deleteButton').confirmation({
            onConfirm: deleteOrder,
            title: "If you delete an order by mistake you will have to create a new order. Are you sure you want to delete this order?"
        });
    });

    function deleteOrder() {
        $('#worksheetPanel').hide();
        $('#deletingPanel').show();
        var postData = '{"orderId" : "@Model.Order.Id"}';
        console.log(postData);

        $.ajax({
            type: 'POST',
            url: '@Url.Action("DeleteOrder", "Order")',
            contentType: 'application/json',
            dataType: 'json',
            data: postData,
            success: function (data, status, request) {
                window.location = ('@Url.Action("Index", "Order")');
            },
            error: function (data, status, request) {
                console.log(data);
                console.log(status);
                console.log(request);
                $('#worksheetPanel').show();
                $('#deletingPanel').hide();
            }
        });
    }
</script>
